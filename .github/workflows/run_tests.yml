name: Run drevalpy Tests

on:
  push:
    branches:
      - "release/*"
  pull_request:
    branches:
      - "*"

jobs:
  tests:
    name: ${{ matrix.session }} ${{ matrix.python-version }} / ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - { python-version: "3.13", os: ubuntu-latest, session: "pre-commit" }
          - { python-version: "3.13", os: ubuntu-latest, session: "mypy" }
          - { python-version: "3.13", os: ubuntu-latest, session: "tests" }
          - { python-version: "3.13", os: windows-latest, session: "typeguard" }
          - { python-version: "3.13", os: ubuntu-latest, session: "xdoctest" }
          - { python-version: "3.13", os: ubuntu-latest, session: "docs-build" }

    env:
      NOXSESSION: ${{ matrix.session }}

    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed to get the full git history for diffing

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        run: |
          pipx install poetry
          pipx inject poetry poetry-plugin-export
          poetry --version

      - name: Install nox nox-poetry rich
        run: |
          pipx install nox
          pipx inject nox nox-poetry
          pipx inject nox rich
          nox --version

      - name: Compute pre-commit cache key
        if: matrix.session == 'pre-commit'
        id: pre-commit-cache
        shell: python
        run: |
          import hashlib
          import sys

          python = "py{}.{}".format(*sys.version_info[:2])
          payload = sys.version.encode() + sys.executable.encode()
          digest = hashlib.sha256(payload).hexdigest()
          result = "${{ runner.os }}-{}-{}-pre-commit".format(python, digest[:8])

          print("::set-output name=result::{}".format(result))

      - name: Restore pre-commit cache
        uses: actions/cache@v4.2.3
        if: matrix.session == 'pre-commit'
        with:
          path: ~/.cache/pre-commit
          key: ${{ steps.pre-commit-cache.outputs.result }}-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: |
            ${{ steps.pre-commit-cache.outputs.result }}-

      - name: Create pre-commit baseline
        if: matrix.session == 'pre-commit'
        id: pre-commit-baseline
        run: |
          git add -A
          git diff --staged --name-only > changed_files.txt
          echo "changed_files=$(cat changed_files.txt)" >> $GITHUB_OUTPUT

      - name: Run Nox (pre-commit)
        if: matrix.session == 'pre-commit'
        continue-on-error: true # Continue even if pre-commit fails
        run: nox --force-color --python=${{ matrix.python-version }}

      - name: Show and upload pre-commit changes
        if: matrix.session == 'pre-commit'
        run: |
          # Get the changed files from the baseline
          changed_files=$(cat changed_files.txt)

          # Show the diff
          echo "::group::Changes made by pre-commit hooks"
          git diff --color=always $changed_files || true
          echo "::endgroup::"

          # Create patch file for download
          git diff --patch --output=pre-commit-changes.patch $changed_files || true

          # Count the changes
          changes_count=$(git diff --name-only | wc -l)
          echo "changes_count=$changes_count" >> $GITHUB_ENV

      - name: Upload pre-commit changes as artifact
        if: matrix.session == 'pre-commit' && env.changes_count != '0'
        uses: actions/upload-artifact@v4
        with:
          name: pre-commit-changes
          path: pre-commit-changes.patch

      - name: Run Nox (other sessions)
        if: matrix.session != 'pre-commit'
        run: nox --force-color --python=${{ matrix.python-version }}

      - name: Upload coverage data
        if: always() && matrix.session == 'tests' && matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-data
          path: ".coverage.*"
          include-hidden-files: "true"

      - name: Upload documentation
        if: matrix.session == 'docs-build'
        uses: actions/upload-artifact@v4
        with:
          name: docs
          path: docs/_build

  coverage:
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4

      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: 3.13

      - name: Install Poetry
        run: |
          pipx install poetry
          pipx inject poetry poetry-plugin-export
          poetry --version

      - name: Install nox nox-poetry rich
        run: |
          pipx install nox
          pipx inject nox nox-poetry
          pipx inject nox rich
          nox --version

      - name: Download coverage data
        uses: actions/download-artifact@v4
        with:
          name: coverage-data

      - name: Combine coverage data and display human readable report
        run: nox --force-color --session=coverage

      - name: Create coverage report
        run: nox --force-color --session=coverage -- xml -i

      - name: Upload coverage report
        uses: codecov/codecov-action@v5.4.3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
